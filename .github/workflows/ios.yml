name: iOS starter workflow

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build_with_signing:
    runs-on: macos-latest
    steps:
      # this was more debug as was curious what came pre-installed
      # GitHub shares this online, e.g. https://github.com/actions/runner-images/blob/macOS-12/20230224.1/images/macos/macos-12-Readme.md
      - name: check Xcode version
        run: /usr/bin/xcodebuild -version

      - name: checkout repository
        uses: actions/checkout@v3

      - name: Install the Apple certificate and provisioning profile
        env:
          WORKSPACE: 'Fluxstore.xcworkspace'
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          ARCHIVE_PATH: 'build/Fluxstore.xcarchive'
          EXPORT_PATH: 'Fluxstore/'
          PLIST_PATH: 'Fluxstore/Info.plist'
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles          

       - name: Build Archive
          run: |
            xcodebuild -workspace $WORKSPACE -scheme "Fluxstore" -configuration Debug \
            archive -archivePath $ARCHIVE_PATH -allowProvisioningUpdates
            PROVISIONING_STYLE="Manual" \
            PROVISIONING_PROFILE={$BUILD_PROVISION_PROFILE_BASE64} \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY={$BUILD_CERTIFICATE_BASE64} \

        - name: Export Development
          run: |
            xcodebuild -exportArchive -archivePath $ARCHIVE_PATH -exportPath $EXPORT_PATH . -exportOptionsPlist $PLIST_PATH -allowProvisioningUpdates
            PROVISIONING_STYLE="Manual" \
            PROVISIONING_PROFILE={$BUILD_PROVISION_PROFILE_BASE64} \
            CODE_SIGN_STYLE="Manual" \
            CODE_SIGN_IDENTITY={$BUILD_CERTIFICATE_BASE64} \

      # - name: build archive
      #   run: |
      #     xcodebuild -scheme "Fluxstore" \
      #     -archivePath build/Fluxstore.xcarchive \
      #     -sdk iphoneos \
      #     -configuration Debug \
      #     -destination generic/platform=iOS \
      #     clean archive          



      # - name: export ipa
      #   env:
      #     EXPORT_OPTIONS_PLIST: ${{ secrets.EXPORT_OPTIONS_PLIST }}
      #   run: |
      #     EXPORT_OPTS_PATH=$RUNNER_TEMP/ExportOptions.plist
      #     echo -n "$EXPORT_OPTIONS_PLIST" | base64 --decode -o $EXPORT_OPTS_PATH
      #     xcodebuild -exportArchive -archivePath $RUNNER_TEMP/Fluxstore.xcarchive -exportOptionsPlist $EXPORT_OPTS_PATH -exportPath $RUNNER_TEMP/build    

      # - name: Upload application
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: app
      #     path: ${{ runner.temp }}/build/Fluxstoree.ipa
      #     # you can also archive the entire directory 
      #     # path: ${{ runner.temp }}/build
      #     retention-days: 3
